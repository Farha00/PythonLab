# -*- coding: utf-8 -*-
"""Lab3q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZxEXAoHQwmYY6hnMXSpsNW_kO_TjqtUW
"""

import pandas as pd
import matplotlib.pyplot as plot
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

df = pd.read_csv ('Iris.csv')

def freaquency_bar_graph():
  df.Species.value_counts().plot(figsize=(8,6),kind='bar',color=['yellow','green','black'],
    xlabel='Species',ylabel='Frequency of Species')
  plot.title("Frequency Bar Graph")
  plot.show()

def PCA_graph():
  print("\nPCA Graph")
  X = df.iloc[:, 1:5].values
  X_std = StandardScaler().fit_transform(X)
  pca = PCA(n_components=2)
  principal_components = pca.fit_transform(X_std)
  principal_Df = pd.DataFrame(data = principal_components
              , columns = ['principal component 1', 'principal component 2'])
  final_Df = pd.concat([principal_Df, df['Species']], axis = 1)

  fig = plot.figure(figsize = (8,7))
  ax = fig.add_subplot(1,1,1)
  ax.set_xlabel('First Principle Component')
  ax.set_ylabel('Second Principal Component')
  ax.set_title('PCA Graph')
  targets = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']
  colors = ['yellow', 'green', 'black']
  for target, color in zip(targets,colors):
      indicesToKeep = final_Df['Species'] == target
      ax.scatter(final_Df.loc[indicesToKeep, 'principal component 1']
                , final_Df.loc[indicesToKeep, 'principal component 2']
                , c = color
                , s = 50)
  ax.legend(targets)
  plot.show()

def Histogram_Sepal():
  print("\nDistribution Histogram\n")
  plot.figure(figsize = (7, 5))
  x = df.SepalLengthCm
  plot.hist(x, color = "yellow")
  plot.title("Sepal Length Histogram")
  plot.xlabel("Sepal Length cm")
  plot.ylabel("Distribution Count")
  plot.show()

  print()
  plot.figure(figsize = (7, 5))
  x = df.SepalWidthCm
  plot.hist(x, color = "green")
  plot.title("Sepal Width Histogram")
  plot.xlabel("Sepal Width cm")
  plot.ylabel("Distribution Count")
  plot.show()

def Histogram_Petal():
  print()
  plot.figure(figsize = (7, 5))
  x = df.PetalLengthCm
  plot.hist(x, color = "black")
  plot.title("Petal Length Histogram")
  plot.xlabel("Petal Length cm")
  plot.ylabel("Distribution Count")
  plot.show()

  print()
  plot.figure(figsize = (7, 5))
  x = df.PetalWidthCm
  plot.hist(x, color = "red")
  plot.title("Petal Width Histogram")
  plot.xlabel("Petal Width cm")
  plot.ylabel("Distribution Count")
  plot.show()

freaquency_bar_graph()
PCA_graph()
Histogram_Sepal()
Histogram_Petal()